两数之和
给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。
你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。

示例:
给定 nums = [2, 7, 11, 15], target = 9
因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]

1.最简单思路：两个for循环两两相加与target比较硬算。6600 ms
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        for i in range(len(nums)):
            for j in range(i+1,len(nums)):
                if nums[i]+nums[j] == target:
                    return [i,j]
        return '无'
2.找 num2 = target - num1 是否也在list中。1252 ms
class Solution:
    def twoSum(self, nums, target):
        for i in range(len(nums)):
            if (target-nums[i]) in nums:
                j = nums.index(target-nums[i])
                if i == j:
                    continue
                else:
                    return [i,j]
改进：num2 的查找并不需要每次从头查找一遍，只需要从上次位置之后查找即可：
从前往后：900ms    
class Solution:
    def twoSum(self, nums, target):
        for i in range(len(nums)):
            if (target-nums[i]) in nums[i+1:]:
                j = nums[i+1:].index(target-nums[i])
                return [i,j+i+1]
从后往前：400ms     
class Solution:
    def twoSum(self,nums, target):
        lens = len(nums)
        j=-1
        for i in range(1,lens):
            temp = nums[:i]
            if (target - nums[i]) in temp:
                j = temp.index(target - nums[i])
                break
        if j>=0:
            return [j,i]
            
3.利用字典，字典记录了每个值对应的位置，省了再查找索引的时间。36 ms
class Solution:
    def twoSum(self, nums, target):
        d = {}
        for i in range(len(nums)):
            d[nums[i]] = i#不要写反了！字典索引保存的是数组值，字典值是数组索引
        for i in range(len(nums)):
            j = d.get(target-nums[i])
            if j!=None and i!=j:
                return [i,j]
